{"version":3,"sources":["reducers/cart.js","constants/ActionTypes.js","reducers/products.js","reducers/index.js","api/shop.js","actions/index.js","components/Button.js","components/ProductItem.js","constants/Labels.js","containers/ProductsContainer.js","components/Cart.js","containers/CartContainer.js","containers/App.js","index.js"],"names":["initialState","isVisible","addedIds","quantityById","state","arguments","length","undefined","action","productId","stateIndex","indexOf","type","concat","Object","toConsumableArray","isUpdatingCartQuantity","hasOwnProperty","quantity","getQuantity","filter","id","index","objectSpread","defineProperty","cart","reducers_products","combineReducers","byId","products","reduce","obj","product","initialInventory","inventory","visibleIds","map","getProduct","getVisibleProducts","getCartVisibility","fromCart","getAddedIds","fromProducts","getTotal","total","price","toFixed","getCartProducts","shop","cb","timeout","setTimeout","_products","payload","setCartVisibility","addToCart","dispatch","getState","addToCartUnsafe","ButtonTypes","ButtonStyles","Button","props","react_default","a","createElement","className","style","trim","onClick","disabled","children","defaultProps","ProductItem","_ref","addButton","removeButton","onAddToCartClicked","onRemoveFromCartClicked","onCartQuantityChanged","src","title","toLowerCase","alt","src_components_Button","label","e","target","select","onChange","parseInt","value","connect","src_components_ProductItem","key","Cart","onCheckoutClicked","CartContainer","isAllowed","removeFromCart","updateCartQuantity","checkout","document","body","overflow","classList","contains","src_components_Cart","removeFromCartUnsafe","maxQuantity","Number","isNaN","updateCartQuantityUnsafe","containers_ProductsContainer","src_containers_CartContainer","middleware","thunk","store","createStore","reducer","applyMiddleware","apply","receiveProducts","render","react_redux_es","src_containers_App","getElementById"],"mappings":"mSASMA,EAAe,CACnBC,WAAW,EACXC,SAAU,GACVC,aAAc,IAKVD,EAAW,SAAXA,IAAsD,IAA1CE,EAA0CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCL,EAAaE,SAAUM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClDE,EAAcD,EAAdC,UACFC,EAAaN,EAAMF,SAASS,QAAQF,GAE1C,OAAQD,EAAOI,MACb,ICrBuB,cDsBrB,OAAoB,IAAhBF,EACKN,EAAMF,SAEf,GAAAW,OAAAC,OAAAC,EAAA,EAAAD,CAAYV,EAAMF,UAAlB,CAA4BO,IAC9B,ICzB4B,mBD0B1B,IAAMO,EAAyBR,EAAOS,eAAe,YAErD,OAAoB,IAAhBP,IAAuBM,GAA8C,IAApBR,EAAOU,UAAmBC,EAAYf,EAAOK,IAAc,GACvGL,EAAMF,SAASkB,OAAO,SAACC,EAAIC,GAAL,OAAeA,IAAUZ,IAEjDN,EAAMF,SACf,IC/BgC,uBDgC9B,OAAIM,EAAOU,SAAW,EACbhB,EAASE,EAADU,OAAAS,EAAA,EAAAT,CAAA,GAAaN,EAAb,CAAqBI,KCnCjB,iBDqCZV,EAASE,EAADU,OAAAS,EAAA,EAAAT,CAAA,GAAaN,EAAb,CAAqBI,KCpCZ,sBDsC5B,QACE,OAAOR,EAAMF,WAIbC,EAAe,WAA+C,IAA9CC,EAA8CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtCL,EAAaG,aAAcK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC1DE,EAAcD,EAAdC,UAER,OAAQD,EAAOI,MACb,IChDuB,cDiDrB,OAAOE,OAAAS,EAAA,EAAAT,CAAA,GACFV,EADLU,OAAAU,EAAA,EAAAV,CAAA,GAEGL,GAAaL,EAAMK,IAAc,GAAK,IAE3C,ICpD4B,mBD4D1B,OAPIL,EAAMK,KACRL,EAAMK,KAEmB,IAArBL,EAAMK,WACDL,EAAMK,IAGVL,EACT,IC5DgC,uBD6D9B,OAAII,EAAOU,SAAW,EACbJ,OAAAS,EAAA,EAAAT,CAAA,GACDV,EADNU,OAAAU,EAAA,EAAAV,CAAA,GAEIL,EAAYD,EAAOU,mBAGhBd,EAAMK,GAERL,GACT,QACE,OAAOA,IAIAe,EAAc,SAACf,EAAOK,GAAR,OACzBL,EAAMD,aAAaM,IAAc,GAqBpBgB,EAjBF,WAAkC,IAAjCrB,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBL,EAAcQ,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7C,OAAQC,EAAOI,MACb,ICrF+B,sBDsF7B,OAAOE,OAAAS,EAAA,EAAAT,CAAA,GAAKV,EAAZ,CAAmBH,UAAWO,EAAOP,YACvC,ICnF4B,mBDoF1B,OAAOD,EACT,ICnF4B,mBDoF1B,OAAOQ,EAAOiB,KAChB,QACE,MAAO,CACLxB,UAAWG,EAAMH,UACjBC,SAAUA,EAASE,EAAOI,GAC1BL,aAAcA,EAAaC,EAAMD,aAAcK,MEjCvDkB,EAAeC,WAAf,CAA+B,CAC7BC,KAtCW,WAAwB,IAAvBxB,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnC,OAAQC,EAAOI,MACb,IDpB4B,mBCqB1B,OAAOE,OAAAS,EAAA,EAAAT,CAAA,GACFV,EACAI,EAAOqB,SAASC,OAAO,SAACC,EAAKC,GAG9B,OAFAA,EAAQC,iBAAmBD,EAAQE,UACnCH,EAAIC,EAAQX,IAAMW,EACXD,GACN,KAEP,ID/B4B,mBCgC1B,IAAK,IAAMtB,KAAaL,EACtBA,EAAMK,GAAWwB,iBAAmB7B,EAAMK,GAAWyB,UAEvD,OAAO9B,EACT,YACUK,EAAcD,EAAdC,UACR,OAAIA,EACKK,OAAAS,EAAA,EAAAT,CAAA,GACFV,EADLU,OAAAU,EAAA,EAAAV,CAAA,GAEGL,EA3CM,SAACL,EAAOI,GACvB,OAAQA,EAAOI,MACb,IDJuB,cCKrB,OAAOE,OAAAS,EAAA,EAAAT,CAAA,GACFV,EADL,CAEE8B,UAAW9B,EAAM8B,UAAY,IAEjC,IDR4B,mBCS1B,OAAOpB,OAAAS,EAAA,EAAAT,CAAA,GACFV,EADL,CAEE8B,UAAY9B,EAAM8B,UAAY9B,EAAM6B,iBAAoB7B,EAAM8B,UAAY,EAAI9B,EAAM8B,YAExF,IDZgC,uBCa9B,OAAOpB,OAAAS,EAAA,EAAAT,CAAA,GACFV,EADL,CAEE8B,UAAW9B,EAAM6B,iBAAmBzB,EAAOU,WAE/C,QACE,OAAOd,GAyBUyB,CAASzB,EAAMK,GAAYD,KAGrCJ,IAeX+B,WAXiB,WAAwB,IAAvB/B,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzC,OAAQC,EAAOI,MACb,IDhD4B,mBCiD1B,OAAOJ,EAAOqB,SAASO,IAAI,SAAAJ,GAAO,OAAIA,EAAQX,KAChD,QACE,OAAOjB,MASAiC,EAAa,SAACjC,EAAOiB,GAAR,OACxBjB,EAAMwB,KAAKP,IAEAiB,EAAqB,SAAAlC,GAAK,OACrCA,EAAM+B,WAAWC,IAAI,SAAAf,GAAE,OAAIgB,EAAWjC,EAAOiB,MCnEhCM,cAAgB,CAC7BF,OACAI,aAGWU,EAAoB,SAAAnC,GAAK,OHMT,SAAAA,GAAK,OAAIA,EAAMH,UGNFuC,CAAuBpC,EAAMqB,OACjEgB,EAAc,SAAArC,GAAK,OHuEE,SAAAA,GAAK,OAAIA,EAAMF,SGvEbsC,CAAqBpC,EAAMqB,OAClDN,EAAc,SAACf,EAAOiB,GAAR,OAAemB,EAAqBpC,EAAMqB,KAAMJ,IAC9DgB,EAAa,SAACjC,EAAOiB,GAAR,OAAeqB,EAAwBtC,EAAMyB,SAAUR,IAE7DsB,EAAW,SAAAvC,GAAK,OAC3BqC,EAAYrC,GACT0B,OAAO,SAACc,EAAOvB,GAAR,OACNuB,EAAQP,EAAWjC,EAAOiB,GAAIwB,MAAQ1B,EAAYf,EAAOiB,IACzD,GAEDyB,QAAQ,IAEAC,EAAkB,SAAA3C,GAAK,OAClCqC,EAAYrC,GAAOgC,IAAI,SAAAf,GAAE,OAAAP,OAAAS,EAAA,EAAAT,CAAA,GACpBuB,EAAWjC,EAAOiB,GADE,CAEvBH,SAAUC,EAAYf,EAAOiB,gBCIlB2B,EAEA,SAACC,EAAIC,GAAL,OAAiBC,WAAW,kBAAMF,EAAGG,IAAYF,GA1BhD,MAwBDF,EAGA,SAACK,EAASJ,EAAIC,GAAd,OAA0BC,WAAW,kBAAMF,KAAMC,GA3BhD,MCSHI,EAAoB,SAAArD,GAAS,MAAK,CAC7CW,KJfiC,sBIgBjCX,cAQWsD,EAAY,SAAA9C,GAAS,OAAI,SAAC+C,EAAUC,GAC3CA,IAAW5B,SAASD,KAAKnB,GAAWyB,UAAY,GAClDsB,EAPoB,SAAA/C,GAAS,MAAK,CACpCG,KJnByB,cIoBzBH,aAKWiD,CAAgBjD,MCtBhBkD,UAEA,qBAGAC,EAEE,sBAFFA,EAGG,uBAIVC,EAAS,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,UACEC,UAAW,GAAArD,OAAGiD,EAAMI,UAAT,YAAArD,OAA6BiD,EAAMlD,KAAnC,KAAAC,OAA2CiD,EAAMK,OAAQC,OACpEC,QAASP,EAAMO,QACfC,SAAUR,EAAMQ,SAAW,gBAAa/D,GACrCuD,EAAMS,WAYbV,EAAOW,aAAe,CACpBN,UAAW,GACXtD,KA9BS,kBA+BTuD,MA1BS,mBA6BIN,QCjCTY,UAAc,SAAAC,GAAA,IAAG1C,EAAH0C,EAAG1C,QAAS2C,EAAZD,EAAYC,UAAWC,EAAvBF,EAAuBE,aAAcC,EAArCH,EAAqCG,mBAAoBC,EAAzDJ,EAAyDI,wBAAyBC,EAAlFL,EAAkFK,sBAAlF,OAClBhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,qBACVc,IAAG,QAAAnE,OAAUmB,EAAQiD,MAAMC,cAAxB,QACHC,IAAI,KACNpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACXlC,EAAQiD,OAEXlB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAb,IACQlC,EAAQa,QAGlBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BACVlC,EAAQE,UADX,ICbiB,aDgBjB6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACVY,GACDf,EAAAC,EAAAC,cAACmB,EAAD,CACElB,UAAU,sBACVtD,KAAMgE,EAAahE,KACnBuD,MAAOS,EAAaT,MACpBE,QAASS,EACTR,SAAUtC,EAAQE,WAAaF,EAAQC,oBACjC2C,EAAaS,OAAST,EAAaS,OC1BvB,sBD4BnBN,GACDhB,EAAAC,EAAAC,cAAA,SACEC,UAAU,wBACVG,QAAS,SAAAiB,GAAC,OAAIA,EAAEC,OAAOC,UACvBC,SAAU,SAAAH,GAAC,OAAIP,EAAsBW,SAASJ,EAAEC,OAAOI,MAAO,MAC9DA,MAAO3D,EAAQC,iBAAmBD,EAAQE,cAC3C2C,GACDd,EAAAC,EAAAC,cAACmB,EAAD,CACElB,UAAU,mBACVtD,KAAM+D,EAAU/D,KAChBuD,MAAOQ,EAAUR,MACjBE,QAASQ,EACTP,SAAUtC,EAAQE,WAAa,KACzByC,EAAUU,OAASV,EAAUU,QAAWrD,EAAQE,UAAY,EC1CrD,cAEH,mBDsExBuC,EAAYD,aAAe,CACzBG,UAAW,GACXC,aAAc,IAGDH,QEnDAmB,cAJS,SAAAxF,GAAK,MAAK,CAChCyB,SAAUS,EAAmBlC,EAAMyB,YAKnC,CAAE0B,aAFWqC,CAzBW,SAAAlB,GAAA,IAAG7C,EAAH6C,EAAG7C,SAAU0B,EAAbmB,EAAanB,UAAb,OACxBQ,EAAAC,EAAAC,cAAA,WACGpC,EAASO,IAAI,SAAAJ,GAAO,OACnB+B,EAAAC,EAAAC,cAAC4B,EAAD,CACEC,IAAK9D,EAAQX,GACbW,QAASA,EACT6C,mBAAoB,kBAAMtB,EAAUvB,EAAQX,YCoErC0E,UA1EF,SAAArB,GAAA,IAAG7C,EAAH6C,EAAG7C,SAAU8C,EAAbD,EAAaC,UAAWC,EAAxBF,EAAwBE,aAAchC,EAAtC8B,EAAsC9B,MAAOiC,EAA7CH,EAA6CG,mBAAoBC,EAAjEJ,EAAiEI,wBAAyBC,EAA1FL,EAA0FK,sBAAuBiB,EAAjHtB,EAAiHsB,kBAAjH,OACXjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cFRO,aEWrBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACbrC,EAASvB,OAAS,GACjByD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACGpC,EAASO,IAAI,SAAAJ,GAAO,OACnB+B,EAAAC,EAAAC,cAAC4B,EAAD,CACEC,IAAK9D,EAAQX,GACbW,QAASA,EACT2C,UAAWA,EACXC,aAAcA,EACdC,mBAAoB,kBAAMA,EAAmB7C,EAAQX,KACrDyD,wBAAyB,kBAAMA,EAAwB9C,EAAQX,KAC/D0D,sBAAuB,SAAA7D,GAAQ,OAAI6D,EAAsB/C,EAAQX,GAAIH,SAG3E6C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBFxBG,UE2BhBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,IACQtB,IAGVmB,EAAAC,EAAAC,cAACmB,EAAD,CACElB,UAAU,iBACVG,QAAS2B,EACT1B,SAAUzC,EAASvB,QAAU,GF7Bf,cEiClBuB,EAASvB,QACTyD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,kBACVc,IAAI,oBACJG,IAAI,KACNpB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBF9CS,8CGWxB+B,UAAgB,SAAAvB,GAAA,IALGwB,EAKAjG,EAAHyE,EAAGzE,UAAW4B,EAAd6C,EAAc7C,SAAUe,EAAxB8B,EAAwB9B,MAAOW,EAA/BmB,EAA+BnB,UAAW4C,EAA1CzB,EAA0CyB,eAAgBC,EAA1D1B,EAA0D0B,mBAAoBC,EAA9E3B,EAA8E2B,SAAU/C,EAAxFoB,EAAwFpB,kBAAxF,OALG4C,GAMLjG,EALlBqG,SAASC,KAAKpC,MAAMqC,SAAYN,EAAuB,GAAX,SAKZjG,GAC9B8D,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVG,QAAS,SAAAiB,GAAC,OAAIA,EAAEC,OAAOkB,UAAUC,SAAS,cAAgBpD,GAAkB,KAC5ES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,uBACVc,IAAI,qBACJX,QAAS,kBAAMf,GAAkB,IACjC6B,IAAI,KACNpB,EAAAC,EAAAC,cAAC0C,EAAD,CACE9E,SAAUA,EACV+C,aAAc,CACZhE,KAAM+C,EACNQ,MAAOP,EACPyB,MAAO,UAETV,UAAW,CACT/D,KAAM+C,EACNQ,MAAOP,EACPyB,MAAO,KAETzC,MAAOA,EACPiC,mBAAoBtB,EACpBuB,wBAAyBqB,EACzBpB,sBAAuBqB,EACvBJ,kBAAmB,kBAAMK,EAASxE,WAsB9CoE,EAAczB,aAAe,CAC3BvE,WAAW,GAGb,IAMe2F,cANS,SAACxF,GAAD,MAAY,CAClCH,UAAWsC,EAAkBnC,GAC7ByB,SAAUkB,EAAgB3C,GAC1BwC,MAAOD,EAASvC,KAKhB,CAAEmD,YAAW4C,eNzCe,SAAA1F,GAAS,OAAI,SAAC+C,EAAUC,GACpD,IAAMzB,EAAUyB,IAAW5B,SAASD,KAAKnB,GAErCuB,EAAQE,UAAYF,EAAQC,kBAC9BuB,EATyB,SAAA/C,GAAS,MAAK,CACzCG,KJ7B8B,mBI8B9BH,aAOWmG,CAAqBnG,MMqCH2F,mBN3BG,SAAC3F,EAAWS,GAAZ,OAAyB,SAACsC,EAAUC,GACpE,IAAMoD,EAAcpD,IAAW5B,SAASD,KAAKnB,GAAWwB,iBAExDf,EAAY4F,OAAOC,MAAM7F,IAAaA,GAAY,EAAK,EAAMA,EAAW2F,EAAeA,EAAc3F,EAErGsC,EAX+B,SAAC/C,EAAWS,GAAZ,MAA0B,CACzDN,KJzCkC,uBI0ClCH,YACAS,YAQS8F,CAAyBvG,EAAWS,MMsBImF,SNnB3B,SAAAxE,GAAQ,OAAI,SAAC2B,EAAUC,GAAa,IAClDhC,EAASgC,IAAThC,KAER+B,EAAS,CACP5C,KJzD4B,qBI2D9BoC,EAAiBnB,EAAU,WACzB2B,EAAS,CACP5C,KJ5D0B,mBI6D1Ba,aMUuD6B,qBAF9CsC,CAGbK,GCrCaL,sBAJS,SAACxF,GAAD,MAAY,CAClCyB,SAAUkB,EAAgB3C,KAK1B,CAAEkD,qBAFWsC,CA9BH,SAAAlB,GAAA,IAAG7C,EAAH6C,EAAG7C,SAAUyB,EAAboB,EAAapB,kBAAb,OACVS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBJbM,cIgBpBH,EAAAC,EAAAC,cAAA,KACEC,UAAU,YACVG,QAAS,kBAAMf,GAAkB,KACjCS,EAAAC,EAAAC,cAAA,OACEC,UAAU,gBACVc,IAAI,sBACJG,IAAI,KACLtD,EAASvB,OAAS,EJnBG,sBAFJ,uBIwBtByD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACdH,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACiD,EAAD,UClBEC,EAAa,CAAEC,KAKrB,IAAMC,EAAQC,YACZC,EACAC,IAAeC,WAAf,EAAmBN,IAGrBE,EAAM7D,SRZ8B,SAAAA,GAClCR,EAAiB,SAAAnB,GACf2B,EAPoB,SAAA3B,GAAQ,MAAK,CACnCjB,KJG8B,mBIF9BiB,YAKW6F,CAAgB7F,QQY7B8F,iBACE5D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAUP,MAAOA,GACftD,EAAAC,EAAAC,cAAC4D,EAAD,OAEFvB,SAASwB,eAAe","file":"static/js/main.a122e324.chunk.js","sourcesContent":["import {\r\n  SET_CART_VISIBILITY,\r\n  ADD_TO_CART,\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  CHECKOUT_REQUEST,\r\n  CHECKOUT_FAILURE\r\n} from '../constants/ActionTypes'\r\n\r\nconst initialState = {\r\n  isVisible: false,\r\n  addedIds: [],\r\n  quantityById: {}\r\n}\r\n\r\nexport const getVisibility = state => state.isVisible\r\n\r\nconst addedIds = (state = initialState.addedIds, action) => {\r\n  const { productId } = action\r\n  const stateIndex = state.addedIds.indexOf(productId)\r\n\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      if (stateIndex !== -1) {\r\n        return state.addedIds\r\n      }\r\n      return [ ...state.addedIds, productId ]\r\n    case REMOVE_FROM_CART:\r\n      const isUpdatingCartQuantity = action.hasOwnProperty('quantity')\r\n\r\n      if (stateIndex !== -1 && ((isUpdatingCartQuantity && action.quantity === 0) || getQuantity(state, productId) <= 1)) {\r\n        return state.addedIds.filter((id, index) => index !== stateIndex)\r\n      }\r\n      return state.addedIds\r\n    case UPDATE_CART_QUANTITY:\r\n      if (action.quantity > 0) {\r\n        return addedIds(state, { ...action, type: ADD_TO_CART })\r\n      } else {\r\n        return addedIds(state, { ...action, type: REMOVE_FROM_CART })\r\n      }\r\n    default:\r\n      return state.addedIds\r\n  }\r\n}\r\n\r\nconst quantityById = (state = initialState.quantityById, action) => {\r\n  const { productId } = action\r\n\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        [productId]: (state[productId] || 0) + 1\r\n      }\r\n    case REMOVE_FROM_CART:\r\n      if (state[productId]) {\r\n        state[productId]--\r\n\r\n        if (state[productId] === 0) {\r\n          delete state[productId]\r\n        }\r\n      }\r\n      return state\r\n    case UPDATE_CART_QUANTITY:\r\n      if (action.quantity > 0) {\r\n        return {\r\n           ...state,\r\n           [productId]: action.quantity\r\n        }\r\n      } else {\r\n        delete state[productId]\r\n      }\r\n      return state\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const getQuantity = (state, productId) =>\r\n  state.quantityById[productId] || 0\r\n\r\nexport const getAddedIds = state => state.addedIds\r\n\r\nconst cart = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_CART_VISIBILITY:\r\n      return { ...state, isVisible: action.isVisible }\r\n    case CHECKOUT_REQUEST:\r\n      return initialState\r\n    case CHECKOUT_FAILURE:\r\n      return action.cart\r\n    default:\r\n      return {\r\n        isVisible: state.isVisible,\r\n        addedIds: addedIds(state, action),\r\n        quantityById: quantityById(state.quantityById, action)\r\n      }\r\n  }\r\n}\r\n\r\nexport default cart\r\n","export const SET_CART_VISIBILITY = 'SET_CART_VISIBILITY'\r\nexport const ADD_TO_CART = 'ADD_TO_CART'\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART'\r\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY'\r\nexport const CHECKOUT_REQUEST = 'CHECKOUT_REQUEST'\r\nexport const CHECKOUT_SUCCESS = 'CHECKOUT_SUCCESS'\r\nexport const CHECKOUT_FAILURE = 'CHECKOUT_FAILURE'\r\nexport const RECEIVE_PRODUCTS = 'RECEIVE_PRODUCTS'\r\n","import { combineReducers } from 'redux'\r\nimport { RECEIVE_PRODUCTS, ADD_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CHECKOUT_SUCCESS } from '../constants/ActionTypes'\r\n\r\nconst products = (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        inventory: state.inventory - 1\r\n      }\r\n    case REMOVE_FROM_CART:\r\n      return {\r\n        ...state,\r\n        inventory: (state.inventory < state.initialInventory) ? state.inventory + 1 : state.inventory\r\n      }\r\n    case UPDATE_CART_QUANTITY:\r\n      return {\r\n        ...state,\r\n        inventory: state.initialInventory - action.quantity\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst byId = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case RECEIVE_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        ...action.products.reduce((obj, product) => {\r\n          product.initialInventory = product.inventory\r\n          obj[product.id] = product\r\n          return obj\r\n        }, {})\r\n      }\r\n    case CHECKOUT_SUCCESS:\r\n      for (const productId in state) {\r\n        state[productId].initialInventory = state[productId].inventory\r\n      }\r\n      return state\r\n    default:\r\n      const { productId } = action\r\n      if (productId) {\r\n        return {\r\n          ...state,\r\n          [productId]: products(state[productId], action)\r\n        }\r\n      }\r\n      return state\r\n  }\r\n}\r\n\r\nconst visibleIds = (state = [], action) => {\r\n  switch (action.type) {\r\n    case RECEIVE_PRODUCTS:\r\n      return action.products.map(product => product.id)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default combineReducers({\r\n  byId,\r\n  visibleIds\r\n})\r\n\r\nexport const getProduct = (state, id) =>\r\n  state.byId[id]\r\n\r\nexport const getVisibleProducts = state =>\r\n  state.visibleIds.map(id => getProduct(state, id))\r\n","import { combineReducers } from 'redux'\r\nimport cart, * as fromCart from './cart'\r\nimport products, * as fromProducts from './products'\r\n\r\nexport default combineReducers({\r\n  cart,\r\n  products\r\n})\r\n\r\nexport const getCartVisibility = state => fromCart.getVisibility(state.cart)\r\nconst getAddedIds = state => fromCart.getAddedIds(state.cart)\r\nconst getQuantity = (state, id) => fromCart.getQuantity(state.cart, id)\r\nconst getProduct = (state, id) => fromProducts.getProduct(state.products, id)\r\n\r\nexport const getTotal = state =>\r\n  getAddedIds(state)\r\n    .reduce((total, id) =>\r\n      total + getProduct(state, id).price * getQuantity(state, id),\r\n      0\r\n    )\r\n    .toFixed(2)\r\n\r\nexport const getCartProducts = state =>\r\n  getAddedIds(state).map(id => ({\r\n    ...getProduct(state, id),\r\n    quantity: getQuantity(state, id)\r\n  }))\r\n","/**\r\n * Mocking client-server processing\r\n */\r\nimport _products from './products.json'\r\n\r\nconst TIMEOUT = 100\r\n\r\n/*const getProducts = async (callback) => {\r\n  const productsUrl = '{INSERT_URL_HERE}'\r\n\r\n  try {\r\n    const data = await fetch(productsUrl)\r\n    let products = await data.json()\r\n\r\n    products = products.map(product => {\r\n      return {\r\n        id: product.id,\r\n        title: product.productTitle,\r\n        price: product.price.value,\r\n        inventory: product.inventory\r\n      }\r\n    })\r\n\r\n    callback(products)\r\n  } catch(e) {\r\n    // TODO: failed state\r\n  }\r\n}*/\r\n\r\nexport default {\r\n  //getProducts,\r\n  getProducts: (cb, timeout) => setTimeout(() => cb(_products), timeout || TIMEOUT),\r\n  buyProducts: (payload, cb, timeout) => setTimeout(() => cb(), timeout || TIMEOUT)\r\n}\r\n","import shop from '../api/shop'\r\nimport * as types from '../constants/ActionTypes'\r\n\r\nconst receiveProducts = products => ({\r\n  type: types.RECEIVE_PRODUCTS,\r\n  products\r\n})\r\n\r\nexport const getAllProducts = () => dispatch => {\r\n  shop.getProducts(products => {\r\n    dispatch(receiveProducts(products))\r\n  })\r\n}\r\n\r\nexport const setCartVisibility = isVisible => ({\r\n  type: types.SET_CART_VISIBILITY,\r\n  isVisible\r\n})\r\n\r\nconst addToCartUnsafe = productId => ({\r\n  type: types.ADD_TO_CART,\r\n  productId\r\n})\r\n\r\nexport const addToCart = productId => (dispatch, getState) => {\r\n  if (getState().products.byId[productId].inventory > 0) {\r\n    dispatch(addToCartUnsafe(productId))\r\n  }\r\n}\r\n\r\nconst removeFromCartUnsafe = productId => ({\r\n  type: types.REMOVE_FROM_CART,\r\n  productId\r\n})\r\n\r\nexport const removeFromCart = productId => (dispatch, getState) => {\r\n  const product = getState().products.byId[productId]\r\n\r\n  if (product.inventory < product.initialInventory) {\r\n    dispatch(removeFromCartUnsafe(productId))\r\n  }\r\n}\r\n\r\nconst updateCartQuantityUnsafe = (productId, quantity) => ({\r\n  type: types.UPDATE_CART_QUANTITY,\r\n  productId,\r\n  quantity\r\n})\r\n\r\nexport const updateCartQuantity = (productId, quantity) => (dispatch, getState) => {\r\n  const maxQuantity = getState().products.byId[productId].initialInventory\r\n\r\n  quantity = (Number.isNaN(quantity) || quantity <= 0) ? 0 : ((quantity > maxQuantity) ? maxQuantity : quantity)\r\n\r\n  dispatch(updateCartQuantityUnsafe(productId, quantity))\r\n}\r\n\r\nexport const checkout = products => (dispatch, getState) => {\r\n  const { cart } = getState()\r\n\r\n  dispatch({\r\n    type: types.CHECKOUT_REQUEST\r\n  })\r\n  shop.buyProducts(products, () => {\r\n    dispatch({\r\n      type: types.CHECKOUT_SUCCESS,\r\n      cart\r\n    })\r\n    // Replace the line above with line below to rollback on failure:\r\n    // dispatch({ type: types.CHECKOUT_FAILURE, cart })\r\n  })\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './Button.css'\r\n\r\nexport const ButtonTypes = {\r\n  primary: 'button--primary',\r\n  secondary: 'button--secondary'\r\n}\r\n\r\nexport const ButtonStyles = {\r\n  rounded: 'button--rounded',\r\n  roundedLeft: 'button--roundedLeft',\r\n  roundedRight: 'button--roundedRight',\r\n  squared: 'button--squared'\r\n}\r\n\r\nconst Button = props => (\r\n  <button\r\n    className={`${props.className} button ${props.type} ${props.style}`.trim()}\r\n    onClick={props.onClick}\r\n    disabled={props.disabled ? 'disabled' : undefined}>\r\n      {props.children}\r\n  </button>\r\n)\r\n\r\nButton.propTypes = {\r\n  className: PropTypes.string,\r\n  type: PropTypes.oneOf(Object.values(ButtonTypes)),\r\n  style: PropTypes.oneOf(Object.values(ButtonStyles)),\r\n  onClick: PropTypes.func,\r\n  disabled: PropTypes.bool\r\n}\r\n\r\nButton.defaultProps = {\r\n  className: '',\r\n  type: ButtonTypes.primary,\r\n  style: ButtonStyles.rounded\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button, { ButtonTypes, ButtonStyles } from './Button'\r\nimport { ADD_TO_CART, REMOVE_FROM_CART, SOLD_OUT, REMAINING } from '../constants/Labels'\r\nimport './ProductItem.css'\r\n\r\nconst ProductItem = ({ product, addButton, removeButton, onAddToCartClicked, onRemoveFromCartClicked, onCartQuantityChanged }) => (\r\n  <div className=\"productItem\">\r\n    <img\r\n      className=\"productItem__photo\"\r\n      src={`/img/${product.title.toLowerCase()}.png`/* NOTE: Ideally the JSON would store a `photoUrl` string instead of using `title` here */}\r\n      alt=\"\" />\r\n    <div className=\"productItem__container\">\r\n      <div className=\"productItem__topContainer\">\r\n        <h2 className=\"productItem__title\">\r\n          {product.title}\r\n        </h2>\r\n        <p className=\"productItem__price\">\r\n          &#36;{product.price}\r\n        </p>\r\n      </div>\r\n      <div className=\"productItem__bottomContainer\">\r\n        <p className=\"productItem__inventory\">\r\n          {product.inventory} {REMAINING}\r\n        </p>\r\n        <div className=\"productItem__actionsContainer\">\r\n          {!!onRemoveFromCartClicked &&\r\n            <Button\r\n              className=\"productItem__remove\"\r\n              type={removeButton.type}\r\n              style={removeButton.style}\r\n              onClick={onRemoveFromCartClicked}\r\n              disabled={product.inventory >= product.initialInventory}>\r\n                {(!!removeButton.label && removeButton.label) || REMOVE_FROM_CART}\r\n            </Button>}\r\n          {!!onCartQuantityChanged &&\r\n            <input\r\n              className=\"productItem__quantity\"\r\n              onClick={e => e.target.select()}\r\n              onChange={e => onCartQuantityChanged(parseInt(e.target.value, 10))}\r\n              value={product.initialInventory - product.inventory} />}\r\n          {!!onAddToCartClicked &&\r\n            <Button\r\n              className=\"productItem__add\"\r\n              type={addButton.type}\r\n              style={addButton.style}\r\n              onClick={onAddToCartClicked}\r\n              disabled={product.inventory <= 0}>\r\n                {(!!addButton.label && addButton.label) || (product.inventory > 0 ? ADD_TO_CART : SOLD_OUT)}\r\n            </Button>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nProductItem.propTypes = {\r\n  product: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired,\r\n    inventory: PropTypes.number.isRequired,\r\n    initialInventory: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  addButton: PropTypes.shape({\r\n    type: PropTypes.oneOf(Object.values(ButtonTypes)),\r\n    style: PropTypes.oneOf(Object.values(ButtonStyles)),\r\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\r\n  }),\r\n  removeButton: PropTypes.shape({\r\n    type: PropTypes.oneOf(Object.values(ButtonTypes)),\r\n    style: PropTypes.oneOf(Object.values(ButtonStyles)),\r\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\r\n  }),\r\n  onAddToCartClicked: PropTypes.func,\r\n  onRemoveFromCartClicked: PropTypes.func,\r\n  onCartQuantityChanged: PropTypes.func\r\n}\r\n\r\nProductItem.defaultProps = {\r\n  addButton: {},\r\n  removeButton: {}\r\n}\r\n\r\nexport default ProductItem\r\n","export const STORE_NAME = 'Acme Store'\r\nexport const CART_NAME = 'Your Cart'\r\nexport const CART_EMPTY = 'Your cart is empty'\r\nexport const CART_EMPTY_TIP = 'Please add some products to your cart.'\r\nexport const CART_NOT_EMPTY = 'Your cart has items'\r\nexport const CART_TOTAL = 'Total:'\r\nexport const ADD_TO_CART = 'ADD TO CART'\r\nexport const REMOVE_FROM_CART = 'REMOVE FROM CART'\r\nexport const SOLD_OUT = 'SOLD OUT'\r\nexport const REMAINING = 'REMAINING'\r\nexport const CHECKOUT = 'CHECKOUT'\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { addToCart } from '../actions'\r\nimport { getVisibleProducts } from '../reducers/products'\r\nimport ProductItem from '../components/ProductItem'\r\n\r\nconst ProductsContainer = ({ products, addToCart }) => (\r\n  <div>\r\n    {products.map(product =>\r\n      <ProductItem\r\n        key={product.id}\r\n        product={product}\r\n        onAddToCartClicked={() => addToCart(product.id)} />\r\n    )}\r\n  </div>\r\n)\r\n\r\nProductsContainer.propTypes = {\r\n  products: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired,\r\n    inventory: PropTypes.number.isRequired\r\n  })).isRequired,\r\n  addToCart: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  products: getVisibleProducts(state.products)\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addToCart }\r\n)(ProductsContainer)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ProductItem from './ProductItem'\r\nimport Button, { ButtonTypes, ButtonStyles } from './Button'\r\nimport { CART_NAME, CART_EMPTY_TIP, CART_TOTAL, CHECKOUT } from '../constants/Labels'\r\nimport './Cart.css'\r\n\r\nconst Cart = ({ products, addButton, removeButton, total, onAddToCartClicked, onRemoveFromCartClicked, onCartQuantityChanged, onCheckoutClicked }) => (\r\n  <div className=\"cart\">\r\n    <h3 className=\"cart__name\">\r\n      {CART_NAME}\r\n    </h3>\r\n    <hr className=\"cart__divider\" />\r\n    {products.length > 0 &&\r\n      <div>\r\n        <div>\r\n          {products.map(product =>\r\n            <ProductItem\r\n              key={product.id}\r\n              product={product}\r\n              addButton={addButton}\r\n              removeButton={removeButton}\r\n              onAddToCartClicked={() => onAddToCartClicked(product.id)}\r\n              onRemoveFromCartClicked={() => onRemoveFromCartClicked(product.id)}\r\n              onCartQuantityChanged={quantity => onCartQuantityChanged(product.id, quantity)}\r\n            />)}\r\n        </div>\r\n        <hr className=\"cart__divider\" />\r\n        <div className=\"cart__totalContainer\">\r\n          <p className=\"cart__totalLabel\">\r\n            {CART_TOTAL}\r\n          </p>\r\n          <p className=\"cart__totalPrice\">\r\n            &#36;{total}\r\n          </p>\r\n        </div>\r\n        <Button\r\n          className=\"cart__checkout\"\r\n          onClick={onCheckoutClicked}\r\n          disabled={products.length <= 0}>\r\n            {CHECKOUT}\r\n        </Button>\r\n      </div>}\r\n    {!products.length &&\r\n      <div className=\"cart__emptyContainer\">\r\n        <img\r\n          className=\"cart__emptyIcon\"\r\n          src=\"img/cart-gray.svg\"\r\n          alt=\"\" />\r\n        <p className=\"cart__emptyTip\">\r\n          {CART_EMPTY_TIP}\r\n        </p>\r\n      </div>}\r\n  </div>\r\n)\r\n\r\nCart.propTypes = {\r\n  products: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired,\r\n    inventory: PropTypes.number.isRequired,\r\n    initialInventory: PropTypes.number.isRequired\r\n  })),\r\n  addButton: PropTypes.shape({\r\n    type: PropTypes.oneOf(Object.values(ButtonTypes)),\r\n    style: PropTypes.oneOf(Object.values(ButtonStyles)),\r\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\r\n  }),\r\n  removeButton: PropTypes.shape({\r\n    type: PropTypes.oneOf(Object.values(ButtonTypes)),\r\n    style: PropTypes.oneOf(Object.values(ButtonStyles)),\r\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\r\n  }),\r\n  total: PropTypes.string,\r\n  onAddToCartClicked: PropTypes.func.isRequired,\r\n  onRemoveFromCartClicked: PropTypes.func.isRequired,\r\n  onCartQuantityChanged: PropTypes.func.isRequired,\r\n  onCheckoutClicked: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cart\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { addToCart, removeFromCart, updateCartQuantity, checkout, setCartVisibility } from '../actions'\r\nimport { getCartVisibility, getCartProducts, getTotal } from '../reducers'\r\nimport Cart from '../components/Cart'\r\nimport { ButtonTypes, ButtonStyles } from '../components/Button'\r\nimport './CartContainer.css'\r\n\r\nconst setPageScrolling = isAllowed => {\r\n  document.body.style.overflow = !isAllowed ? 'hidden' : ''\r\n  return true\r\n}\r\n\r\nconst CartContainer = ({ isVisible, products, total, addToCart, removeFromCart, updateCartQuantity, checkout, setCartVisibility }) => (\r\n  setPageScrolling(!isVisible) && isVisible &&\r\n    <div\r\n      className=\"cartModal\"\r\n      onClick={e => e.target.classList.contains('cartModal') && setCartVisibility(false)}>\r\n      <div className=\"cartModal__container\">\r\n        <div className=\"cartModal__contents\">\r\n          <img\r\n            className=\"cartModal__closeIcon\"\r\n            src=\"img/close-icon.svg\"\r\n            onClick={() => setCartVisibility(false)}\r\n            alt=\"\" />\r\n          <Cart\r\n            products={products}\r\n            removeButton={{\r\n              type: ButtonTypes.secondary,\r\n              style: ButtonStyles.roundedLeft,\r\n              label: '\\u2013'\r\n            }}\r\n            addButton={{\r\n              type: ButtonTypes.secondary,\r\n              style: ButtonStyles.roundedRight,\r\n              label: '\\u002b'\r\n            }}\r\n            total={total}\r\n            onAddToCartClicked={addToCart}\r\n            onRemoveFromCartClicked={removeFromCart}\r\n            onCartQuantityChanged={updateCartQuantity}\r\n            onCheckoutClicked={() => checkout(products)} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n)\r\n\r\nCartContainer.propTypes = {\r\n  isVisible: PropTypes.bool.isRequired,\r\n  products: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired,\r\n    quantity: PropTypes.number.isRequired\r\n  })).isRequired,\r\n  total: PropTypes.string,\r\n  addToCart: PropTypes.func.isRequired,\r\n  removeFromCart: PropTypes.func.isRequired,\r\n  updateCartQuantity: PropTypes.func.isRequired,\r\n  checkout: PropTypes.func.isRequired,\r\n  setCartVisibility: PropTypes.func.isRequired\r\n}\r\n\r\nCartContainer.defaultProps = {\r\n  isVisible: false\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isVisible: getCartVisibility(state),\r\n  products: getCartProducts(state),\r\n  total: getTotal(state)\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addToCart, removeFromCart, updateCartQuantity, checkout, setCartVisibility }\r\n)(CartContainer)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { setCartVisibility } from '../actions'\r\nimport { getCartProducts } from '../reducers'\r\nimport ProductsContainer from './ProductsContainer'\r\nimport CartContainer from './CartContainer'\r\nimport { STORE_NAME, CART_EMPTY, CART_NOT_EMPTY } from '../constants/Labels'\r\nimport './App.css'\r\n\r\nconst App = ({ products, setCartVisibility }) => (\r\n  <div className=\"app\">\r\n    <div className=\"app__header\">\r\n      <h1 className=\"app__storeName\">\r\n        {STORE_NAME}\r\n      </h1>\r\n      <p\r\n        className=\"app__cart\"\r\n        onClick={() => setCartVisibility(true)}>\r\n        <img\r\n          className=\"app__cartIcon\"\r\n          src=\"/img/cart-black.svg\"\r\n          alt=\"\" />\r\n        {products.length > 0 ? CART_NOT_EMPTY : CART_EMPTY}\r\n      </p>\r\n    </div>\r\n    <hr className=\"app__divider\" />\r\n    <ProductsContainer />\r\n    <CartContainer />\r\n  </div>\r\n)\r\n\r\nApp.propTypes = {\r\n  setCartVisibility: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  products: getCartProducts(state),\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { setCartVisibility }\r\n)(App)\r\n","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\nimport reducer from './reducers'\r\nimport { getAllProducts } from './actions'\r\nimport App from './containers/App'\r\n\r\nconst middleware = [ thunk ];\r\nif (process.env.NODE_ENV !== 'production') {\r\n  middleware.push(createLogger());\r\n}\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  applyMiddleware(...middleware)\r\n)\r\n\r\nstore.dispatch(getAllProducts())\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}